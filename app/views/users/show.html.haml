
-content_for :subtabs do
  .navtitle
    &= @user.name
  = shapado_auto_link(@user.bio)
  %hr

-content_for :sidebar do
  .block
    .follow-info
      - if current_user != @user
        - if logged_in? && current_user.following?(@user)
          = link_to "#{t("followable.unfollow")}", unfollow_user_path(@user), :class => "unfollow_link", 'data-class' => "follow_link", 'data-title' => t("followable.follow"), 'data-undo' => follow_user_path(@user)
        - else
          = link_to "#{t("followable.follow")}", follow_user_path(@user), :class => "follow_link", 'data-class' => "unfollow_link", 'data-title' => t("followable.unfollow"), 'data-undo' => unfollow_user_path(@user)
        .clear
    .inner{:style => "padding-top: 10px"}
      = gravatar @user.email.to_s, :size => 128
      = shapado_auto_link(markdown(@user.description))

    - if @user.following.count > 0
      %h2.title
        = t('followable.following', :count => @user.following.count)
      .friend_list
        - @user.following.each do |follower|
          %span
            = link_to gravatar(follower.email.to_s, :size => 24).html_safe, user_path(follower)
    - if @user.followers.count > 0
      %h2.title
        = t('followable.followers', :count => @user.followers.count)
      .friend_list
        - @user.followers.each do |follower|
          %span
            = link_to gravatar(follower.email.to_s, :size => 24).html_safe, user_path(follower)
#users_show
  .secondary-navigation{:class => @q_sort||"votes"}
    .navtitle
      %span.counter
        = number_with_delimiter(@questions.total_entries)
      = t(:question_count, :scope => "activerecord.models", :count => @questions.total_entries)
    %ul
      %li.newest
        = link_to t("questions.index.newest"), user_path(@user, :q_sort=>"newest"), :rel => "nofollow"
      %li.oldest
        = link_to t("questions.index.oldest"), user_path(@user, :q_sort=>"oldest"), :rel => "nofollow"
      %li.views
        = link_to t("activerecord.attributes.question.views"), user_path(@user, :q_sort=>"views"), :rel => "nofollow"
      %li.votes
        = link_to t("questions.index.votes"), user_path(@user, :q_sort=>"votes"), :rel => "nofollow"
    .clear
  .block
    %ul.items#questions
      -@questions.each do |question|
        = render :partial => "questions/question", :object => question
    .additional_info
      = will_paginate @questions, :param_name => "questions_page"
      .clear

  /Favorites
  .secondary-navigation{:class => @f_sort||"votes"}
    .navtitle
      %span.counter
        = number_with_delimiter(@favorites.total_entries)
      =t(:favorites, :scope => "activerecord.models")
    %ul
      %li.newest
        = link_to t("questions.index.newest"), user_path(@user, :f_sort=>"newest"), :rel => "nofollow"
      %li.oldest
        = link_to t("questions.index.oldest"), user_path(@user, :f_sort=>"oldest"), :rel => "nofollow"
      %li.views
        = link_to t("activerecord.attributes.question.views"), user_path(@user, :f_sort=>"views"), :rel => "nofollow"
      %li.votes
        = link_to t("questions.index.votes"), user_path(@user, :f_sort=>"votes"), :rel => "nofollow"
    .clear
  .block

  %ul.items#questions
    -@favorite_questions.each do |question|
      = render :partial => "questions/question", :object => question
  .additional_info
    = will_paginate @favorites, :param_name => "favorites_page"
    .clear

  / Answers
  .secondary-navigation{:class => @a_sort||"votes"}
    .navtitle
      %span.counter
        = number_with_delimiter(@answers.total_entries)
      =t(:answers, :scope => "activerecord.models")

    %ul
      %li.newest
        = link_to t("questions.index.newest"), user_path(@user, :a_sort=>"newest"), :rel => "nofollow"
      %li.oldest
        = link_to t("questions.index.oldest"), user_path(@user, :a_sort=>"oldest"), :rel => "nofollow"
      %li.votes
        = link_to t("questions.index.votes"), user_path(@user, :a_sort=>"votes"), :rel => "nofollow"
    .clear
  .block

  %ul.items#answers
    -@answers.each do |answer|
      -next if answer.question.banned
      = render :partial => "answers/answer", :object => answer
  .additional_info
    = will_paginate @answers, :param_name => "answers_page"
    .clear

  /Badges
  %h2.title
    .counter
      = number_with_delimiter(@badges.total_entries)
    = t(:badges, :scope => "activerecord.models", :default => "Badges")

  %p= link_to t('.badges.link'), badges_path
  %br
  %ul.list#badges
    -@badges.each do |badge|
      %li
        = render :partial => "badges/badge", :object => badge, :locals => {:hide_user => true}
  .additional_info
    = will_paginate @badges, :param_name => "badges_page"
    .clear

