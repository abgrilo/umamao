
- content_for :subtabs do
  .navtitle
    &= @user.name
  = shapado_auto_link(@user.bio)
  %hr

- content_for :sidebar do
  .follow-info.block
    - if current_user != @user
      - if logged_in? && current_user.following?(@user)
        = link_to t("followable.unfollow"), unfollow_user_path(@user), :class => "unfollow_link", 'data-class' => "follow_link", 'data-title' => t("followable.follow"), 'data-undo' => follow_user_path(@user), "data-entry-type" => "user"
      - else
        = link_to t("followable.follow"), follow_user_path(@user), :class => "follow_link", 'data-class' => "unfollow_link", 'data-title' => t("followable.unfollow"), 'data-undo' => unfollow_user_path(@user), "data-entry-type" => "user"

  .user-info.block
    = avatar_for(@user, :size => 128)
    %br
    - if @user.facebook_account
      = link_to image_tag("facebook.gif"), 'http://www.facebook.com/' + @user.facebook_account.user_info["nickname"]
    - if @user.twitter_account
      = link_to image_tag("twitter.gif"), 'http://twitter.com/' + @user.twitter_account.user_info["nickname"]
    = shapado_auto_link(markdown(@user.description))

  -# Followers
  = render_cell :users, :followers, :followed => @user

  -# Followed users
  = render_cell :users, :following, :follower => @user

  -# Followed topics
  = render_cell :topics, :small_list, :user => @user

#users_show
  .secondary-navigation{:class => @q_sort||"votes"}
    .navtitle
      %span.counter
        = number_with_delimiter(@questions.total_entries)
      = t(:question_count, :scope => "activerecord.models", :count => @questions.total_entries)
    %ul
      %li.newest
        = link_to t("questions.index.newest"), user_path(@user, :q_sort=>"newest"), :rel => "nofollow"
      %li.oldest
        = link_to t("questions.index.oldest"), user_path(@user, :q_sort=>"oldest"), :rel => "nofollow"
      %li.views
        = link_to t("activerecord.attributes.question.views"), user_path(@user, :q_sort=>"views"), :rel => "nofollow"
      %li.votes
        = link_to t("questions.index.votes"), user_path(@user, :q_sort=>"votes"), :rel => "nofollow"
    .clear
  .block
    %ul.items#questions
      - cache("user_questions_#{@user.id}_#{@questions.total_entries}") do
        - @questions.each do |question|
          = render :partial => "questions/question", :object => question
      .additional_info
        = will_paginate @questions, :param_name => "questions_page"
        .clear

  / Favorites
  .secondary-navigation{:class => @f_sort||"votes"}
    .navtitle
      %span.counter
        = number_with_delimiter(@favorites.total_entries)
      = t(:favorites, :scope => "activerecord.models")
    %ul
      %li.newest
        = link_to t("questions.index.newest"), user_path(@user, :f_sort=>"newest"), :rel => "nofollow"
      %li.oldest
        = link_to t("questions.index.oldest"), user_path(@user, :f_sort=>"oldest"), :rel => "nofollow"
      %li.views
        = link_to t("activerecord.attributes.question.views"), user_path(@user, :f_sort=>"views"), :rel => "nofollow"
      %li.votes
        = link_to t("questions.index.votes"), user_path(@user, :f_sort=>"votes"), :rel => "nofollow"
    .clear
  .block

  %ul.items#questions
    - @favorite_questions.each do |question|
      = render :partial => "questions/question", :object => question
  .additional_info
    = will_paginate @favorites, :param_name => "favorites_page"
    .clear

  / Answers
  .secondary-navigation{:class => @a_sort||"votes"}
    .navtitle
      %span.counter
        = number_with_delimiter(@answers.total_entries)
      = t(:answers, :scope => "activerecord.models")

    %ul
      %li.newest
        = link_to t("questions.index.newest"), user_path(@user, :a_sort=>"newest"), :rel => "nofollow"
      %li.oldest
        = link_to t("questions.index.oldest"), user_path(@user, :a_sort=>"oldest"), :rel => "nofollow"
      %li.votes
        = link_to t("questions.index.votes"), user_path(@user, :a_sort=>"votes"), :rel => "nofollow"
    .clear
  .block

  %ul.items#answers
    - cache("user_answers_#{@user.id}_#{@answers.total_entries}") do
      - @answers.each do |answer|
        - next if answer.question.banned
        = render :partial => "answers/answer", :object => answer
    .additional_info
      = will_paginate @answers, :param_name => "answers_page"
      .clear
