var exclude_list = eval("<%= exclude_user_ids.to_json %>".replace(/&quot;/g,"\""));
function clearData(data){
  new_data = new Array();
  data.forEach(function (it){
      if(it.id == undefined || $.inArray(it.id, exclude_list ) == -1){
      new_data[new_data.length] = it;
    }
    });
  return new_data;
}

// User autocomplete for several boxes in the website.
function UserAutocomplete(inputField, itemBoxContainer) {
  AutocompleteBox.call(this, inputField, itemBoxContainer);
}

UserAutocomplete.prototype = {

  activateWithTab: true,

  // Builds an item for this box.
  makeItem: function (data) {
    var item = new Item(data);
    var me = this;
    item.click = this.itemClicked ||
                   function () {
                     me.clear();
                     if(this.data.id == undefined){
                      $(".invited_id").val("");
                      $("#search-users").val("");
                      $(".invite-button").attr("disabled", "disabled");
                     }else{
                      $(".invited_id").val(this.data.id);
                      $("#search-users").val(this.data.title);
                      $(".invite-button").removeAttr("disabled");
                     }
                   };
    return item;
  },

  makeRequest: function (query) {
    var callback = this.requestCallback();
    var input = this.input;
    var request = $.ajax({
      url: this.url,
      dataType: "jsonp",
      jsonp: "json.wrf",
      data: {q: "title:" + Utils.solrEscape(query) +
             " AND entry\\_type:User"},
      success: function (data) {
        var docs = data.response.docs;
        var hasExactMatch = false;
        docs.forEach(function (doc) {
          if (doc.title == query) hasExactMatch = true;
        });
        if (!hasExactMatch) {
          docs.push({
            title: input.val(),
            entry_type: "User",
            question_count: "0"
          });
        }
        callback(docs);
      }
    });
    return request;
  },

  // Populates the suggestion box when data is received.
  processData: function (data) {
    var items = [];
    var me = this;
    data = clearData(data);
    data.forEach(function (it) {
      if(it.photo_url == undefined && (data.length > 1))
        return;
      if(it.photo_url == undefined){
        item = {}
        item.id = undefined
        item.html = "<li class=\"autocomplete-entry\"> Usuário não encontrado </li>";
        items.push(me.makeItem(item));
        return;
      }
      item = $.extend({}, it);
      item.url = "/users/" + it.id;
      item.html = "<li class=\"autocomplete-entry\">" + it.photo_url + " " +
                             it.title + "</li>";
      items.push(me.makeItem(item));
    });
    return items;
  },

  returnDefault: function () {
    var input = this.input.val();
    if (input.trim() != "") {
      this.clear();
      this.action(input);
    }
  },

  // HACK
  itemClicked: null,

  // Action to be run on user title or input box value.
  action: null

};

Utils.extend(UserAutocomplete, AutocompleteBox);
