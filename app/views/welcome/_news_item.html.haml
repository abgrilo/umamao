- title = h(news_item.title)
- origin = news_item.origin
- origin_type = news_item.origin_type.downcase
- action = news_item.news_update.action
- entry = news_item.news_update.entry
- entry_type = news_item.news_update.entry_type.downcase
- question = entry_type == 'question' ? entry : entry.question

- unless question.banned || entry.banned
  %li.entry.item
    -# News_item Summary
    .summary
      %h3= link_to title, question_path(question), :title => truncate(entry.body, :length => 200)
      .origin

        .description= t(".#{entry_type}.#{origin_type}.#{action}", :origin => link_to_model(news_item.origin, origin.name))
      - if entry_type == "answer"
        = render :partial => 'questions/answer', :object => entry, :locals => {:question => question, :answer => entry, :hide_controls => true}

      -# News_item Stats
      .info
        .metadata
          = t("time.ago", :time => time_ago_in_words(entry.created_at))
          \|
          = format_number(question.answers_count)
          = t(:answer_count, :scope => "activerecord.models", :count => question.answers_count)
          - if logged_in? && current_user != question.user
            -# Can watch the question
            \|
            - if question.watch_for?(current_user)
              = link_to t("followable.unfollow"),
                unwatch_question_path(question),
                :class => "unfollow_link",
                "data-class" => "follow_link",
                "data-title" => t("followable.follow"),
                "data-undo" => watch_question_path(question)
            - else
              = link_to t("followable.follow"),
                watch_question_path(question),
                :class => "follow_link",
                "data-class" => "unfollow_link",
                "data-title" => t("followable.unfollow"),
                "data-undo" => unwatch_question_path(question)
    .clear
