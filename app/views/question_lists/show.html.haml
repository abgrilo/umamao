- content_for :js do
  = include_javascripts :content_edit, :show_question_list, :topics_email_subscription
  = javascript_include_tag "#{AppConfig.wmd_location}/jquery.wmd.min.js"
  = javascript_include_tag "#{AppConfig.wmd_location}/jquery.wmd.mathjax.js"

- content_for :css do
  = stylesheet_link_tag "#{AppConfig.wmd_location}/wmd.css"

= render :partial => 'shared/share_header', :locals => { :opts => { :content => @question_list, :class_name => QuestionList.to_s.underscore }, :content_url => question_list_url(@question_list) }

- content_for :head do
  %meta{:name => "keywords", :content => clean_seo_keywords(@question_list.topics.map(&:title).dup, @question_list.title)}
  - if @question_list.description.present?
    %meta{:name => "description", :content => @question_list.description.gsub(/<\/?[^>]*>/, "")[0, 255] }
  %link{:rel => "canonical", :href => question_list_url(@question_list_url) }

#question-list

  %h1.navtitle.title.entry-title.question-list-title-col
    &= @question_list.title

  .body-col
    .description.markdown
      = markdown(@question_list.description)

    = render :partial => "shared/classify", :locals => {:classifiable => @question_list, :ajax_add => true}

  .controls
    .actions
      - if logged_in?
        - if current_user.can_modify?(@question_list)
          = link_to t("scaffold.destroy"), question_list_path(@question_list.id), :confirm => t(".confirm_destroy"), :method => :delete
          = link_to t("scaffold.edit"), edit_topic_path(@question_list), :class => "button"
  - if @question_list.question_list_files.present?
    .files
      %h2= t(".files.title")
      %ul
        - @question_list.question_list_files.each do |question_list_file|
          %li
            = link_to question_list_file.original_filename, question_list_file.url
            - if logged_in? && question_list_file.can_be_destroyed_by?(current_user)
              = link_to t("scaffold.destroy"), destroy_file_question_list_path(@question_list, :file => question_list_file.id), :method => :post, :class => "remove"

  - if @questions.any?
    .secondary-navigation
      - tabs_tag :namespace => :question_list_show, :open_tabs => { :class => :tabs } do |tab|
        = tab.all t('.all'), question_list_path(@question_list)
        - unanswered_counter = @unanswered_questions_count > 0 ? " (#{@unanswered_questions_count})" : ""
        = tab.unanswered t('.unanswered') << unanswered_counter, unanswered_question_list_path(@question_list)

  %ul.items#questions
    - if @questions.empty?
      %li.empty
        - if @question_list.question_list_files.present?
          = t(".empty.transcribe")
        - else
          = t(".empty.basic")
    - else
      - @questions.each do |question|
        = render :partial => "question", :object => question
  .clear

  - if logged_in? && (@questions.total_pages == 0 || @page.to_i == @questions.total_pages)
    = render :partial => "form", :locals => { :question_list => @question_list, :new_question => @new_question }
    #add_file_form
      - form_tag create_file_question_list_path, :multipart => true do
        = label_tag :file, t(".files.add.title")
        = file_field_tag :file
        = submit_tag t(".files.add.submit")
        = link_to t("scaffold.cancel"), "#", :class => "cancel"
    #add_content
      = link_to t(".add_questions"), "#add_questions", :class => "add_questions"
      = t("global.or")
      = link_to t(".add_files"), "#add_files", :class => "add_files"

  - unless @questions.empty?
    #additional_info.pagination
      = will_paginate @questions

- content_for :sidebar do
  = render :partial => "topics/follow", :locals => {:topic => @question_list, :block => "block"}
  = render :partial => "topics/email_subscription", :locals => {:topic => @question_list, :block => "block"}
  .print.block
    %h3= t('question_lists.print_header')
    %ul
      %li= link_to t('question_lists.questions_print'), questions_print_question_list_url(@question_list), :class => 'print-link'
      %li= link_to t('question_lists.full_print'), print_question_list_url(@question_list), :class => 'print-link'

  = render_cell :users, :followers, :followed => @question_list
  = render :partial => 'shared/share_body', :locals => { :opts => { :content => @question_list.id, :class_name => QuestionList.to_s.underscore } }
